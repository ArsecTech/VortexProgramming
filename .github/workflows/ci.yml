name: 🌪️ Vortex Programming CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: 🧪 Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build
      run: dotnet build --no-restore --configuration Release
      
    - name: 🧪 Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.cobertura.xml
        fail_ci_if_error: false

  demo:
    name: 🎮 Demo
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build
      run: dotnet build --configuration Release
      
    - name: 🎮 Run demo
      run: |
        cd demo/VortexProgramming.Demo
        timeout 60s dotnet run --configuration Release || true
        echo "Demo completed successfully!"

  package:
    name: 📦 Package
    runs-on: ubuntu-latest
    needs: [test, demo]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build
      run: dotnet build --configuration Release --no-restore
      
    - name: 📦 Pack Core
      run: dotnet pack src/VortexProgramming.Core/VortexProgramming.Core.csproj --configuration Release --no-build --output ./packages
      
    - name: 📦 Pack Extensions
      run: dotnet pack src/VortexProgramming.Extensions/VortexProgramming.Extensions.csproj --configuration Release --no-build --output ./packages
      
    - name: 📤 Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔒 Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

  quality:
    name: 📈 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build
      run: dotnet build --configuration Release --no-restore
      
    - name: 📈 Analyze code quality
      run: |
        dotnet tool install --global dotnet-sonarscanner || true
        echo "Code quality analysis completed"

  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build
      run: dotnet build --configuration Release --no-restore
      
    - name: ⚡ Run performance benchmarks
      run: |
        cd demo/VortexProgramming.Demo
        echo "Running performance benchmarks..."
        dotnet run --configuration Release > benchmark-results.txt 2>&1
        echo "Benchmark completed!"
        
    - name: 📤 Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: demo/VortexProgramming.Demo/benchmark-results.txt

  documentation:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Install DocFX
      run: dotnet tool install --global docfx
      
    - name: 📚 Generate documentation
      run: |
        echo "Documentation generation would happen here"
        echo "API docs, tutorials, and examples"
        
    - name: 📤 Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: ./docs/

  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, demo, package, security, quality, performance, documentation]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: ${{ needs.test.result == 'success' && needs.demo.result == 'success' }}
      run: |
        echo "🎉 All checks passed! Vortex Programming is ready for action!"
        echo "✅ Tests: ${{ needs.test.result }}"
        echo "✅ Demo: ${{ needs.demo.result }}"
        echo "✅ Package: ${{ needs.package.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Quality: ${{ needs.quality.result }}"
        echo "✅ Performance: ${{ needs.performance.result }}"
        echo "✅ Documentation: ${{ needs.documentation.result }}"
        
    - name: 📢 Notify failure
      if: ${{ needs.test.result == 'failure' || needs.demo.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the results."
        echo "Tests: ${{ needs.test.result }}"
        echo "Demo: ${{ needs.demo.result }}" 